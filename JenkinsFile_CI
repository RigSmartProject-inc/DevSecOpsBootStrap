pipeline {
  agent any

  tools {
    nodejs 'nodejs'
  }

  environment {
    SCANNER_HOME = tool 'sonar-scanner'
  }

  stages {
    stage('Git Checkout') {
      steps {
        git branch: 'dev', credentialsId: '35104275-6980-41e9-849c-634e81e3907a', url: 'https://github.com/RigSmartProject-inc/DevSecOpsBootStrap.git'
      }
    }
    stage('GitLeaks Scan') {
      steps {
        sh '''
          gitleaks detect --source ./client --report-format=json --report-path=gitleaks-client.json || true
          gitleaks detect --source ./api --report-format=json --report-path=gitleaks-api.json || true
    
          # Fail if any "HIGH" or "CRITICAL" severity found (if using custom rules or reports)
          if grep -i '"severity":"HIGH"' gitleaks-client.json gitleaks-api.json; then
            echo "‚ùå High severity secrets found!"
            exit 1
          fi
        '''
      }
    }

      
    stage('Frontend Compilation') {
      steps {
        dir('client') {
          sh 'find . -name "*.js" -exec node --check {} +'
        }
      }
    }

    stage('Backend Compilation') {
      steps {
        dir('api') {
          sh 'find . -name "*.js" -exec node --check {} +'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withSonarQubeEnv('sonar') {
          sh """
            ${SCANNER_HOME}/bin/sonar-scanner \
              -Dsonar.projectName=NodeJS-Project \
              -Dsonar.projectKey=NodeJS-Project
          """
        }
      }
    }

    stage('Quality Gate Check') {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          waitForQualityGate abortPipeline: false
        }
      }
    }

    stage('Trivy FS Scan') {
      steps {
        sh 'trivy fs --format table -o fs-report.html .'
      }
    }

    stage('Docker Build & Tag Images Backend') {
      steps {
        script {
          withDockerRegistry(credentialsId: 'docker-token') {
            dir('api') {
              sh 'docker build -t olayiwola1/bootstrapbackend:latest .'
              sh 'trivy image --format table -o backend-image-report.html olayiwola1/bootstrapbackend:latest'
              sh 'docker push olayiwola1/bootstrapbackend:latest'
            }
          }
        }
      }
    }

    stage('Docker Build & Tag Images Frontend') {
      steps {
        script {
          withDockerRegistry(credentialsId: 'docker-token') {
            dir('client') {
              sh 'docker build -t olayiwola1/bootstrapfrontend:latest .'
              sh 'trivy image --format table -o frontend-image-report.html olayiwola1/bootstrapfrontend:latest'
              sh 'docker push olayiwola1/bootstrapfrontend:latest'
            }
          }
        }
      }
    }
     stage('kubernetes deployment') {
      steps {
         script{
             withKubeConfig(caCertificate: '', clusterName: 'awssreactions-eks', contextName: '', credentialsId: 'k8s-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://71164E4E6A72F97373F5ECD23719AE9A.gr7.ca-central-1.eks.amazonaws.com') {
                     sh 'kubectl apply -f K8S-DEV/storageclass.yaml -n dev'
                     sh 'kubectl apply -f K8S-DEV/mysql.yaml -n dev'
                     sh 'kubectl apply -f K8S-DEV/backend.yaml -n dev'
                     sh 'kubectl apply -f K8S-DEV/frontend.yaml -n dev'
                     sleep 30
                }
         }
      }
    }
     stage('kubernetes resources output') {
      steps {
         script{
             withKubeConfig(caCertificate: '', clusterName: 'awssreactions-eks', contextName: '', credentialsId: 'k8s-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://71164E4E6A72F97373F5ECD23719AE9A.gr7.ca-central-1.eks.amazonaws.com') {
                     sh 'kubectl get pods -n dev'
                     sh 'kubectl get svc -n dev'
                }
         }
      }
    }
  }
}
