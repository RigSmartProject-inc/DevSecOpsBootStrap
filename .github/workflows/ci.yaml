name: CI Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  pre_build:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run ESLint on Frontend
        working-directory: ./client
        run: |
          npm install --save-dev eslint eslint-plugin-react
          npx eslint . --ext .js,.jsx || true

      - name: Run ESLint on Backend
        working-directory: ./api
        run: |
          npm install --save-dev eslint eslint-plugin-react
          npx eslint . --ext .js,.jsx || true

      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=DevSecOpsBootStrap \
            -Dsonar.projectName=DevSecOpsBootStrap \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  static_analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    needs: pre_build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Horusec SAST (text to console)
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd)":/src \
            horuszup/horusec-cli:v2.7 horusec start \
              -p /src \
              --information-severity \
              --output-format=text \
              --log-level=debug \
              --return-error || true
  sca_security_test:
    name: SCA Security Test
    runs-on: ubuntu-latest
    needs: [pre_build]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run Snyk SCA
        run: |
          docker run --rm \
            --name sca \
            -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -v $(pwd):/app \
            snyk/snyk:node test --all-projects || true

      - name: Check Snyk Findings
        run: |
          docker logs sca > container-logs.txt

          echo "üîç Snyk Output:"
          cat container-logs.txt

          if grep -E 'found [1-9][0-9]* vulnerabilities' container-logs.txt; then
            echo "‚ùå Vulnerabilities found. Failing the job."
            exit 1
          else
            echo "‚úÖ No vulnerabilities found."
          fi

  sca:
    name: SCA Security Test
    runs-on: ubuntu-latest
    needs: [pre_build]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install backend dependencies
        working-directory: ./api
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./client
        run: npm install

      - name: Run Snyk on Backend (detailed + non-blocking)
        working-directory: ./api
        run: |
          docker run --rm \
            -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -v "$(pwd)":/app \
            snyk/snyk:node test \
            --severity-threshold=high \
            --json --debug > snyk-backend-results.json || true
          cat snyk-backend-results.json > snyk-backend-output.log

      - name: Upload Snyk Backend Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-backend-results
          path: |
            ./api/snyk-backend-results.json
            ./api/snyk-backend-output.log

      - name: Run Snyk on Frontend (detailed + non-blocking)
        working-directory: ./client
        run: |
          docker run --rm \
            -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -v "$(pwd)":/app \
            snyk/snyk:node test \
            --severity-threshold=high \
            --json --debug > snyk-frontend-results.json || true
          cat snyk-frontend-results.json > snyk-frontend-output.log

      - name: Upload Snyk Frontend Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-frontend-results
          path: |
            ./client/snyk-frontend-results.json
            ./client/snyk-frontend-output.log

  docker_build_and_push:
    name: Docker Build & Push Images
    runs-on: ubuntu-latest
    needs: [static_analysis, sca, pre_build]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push Backend Image
        working-directory: ./api
        run: |
          docker build -t olayiwola1/bootstrapbackend:latest .
          docker run --rm aquasec/trivy image --format table -o ../backend-image-report.html olayiwola1/bootstrapbackend:latest || true
          docker push olayiwola1/bootstrapbackend:latest

      - name: Build & Push Frontend Image
        working-directory: ./client
        run: |
          docker build -t olayiwola1/bootstrapfrontend:latest .
          docker run --rm aquasec/trivy image --format table -o ../frontend-image-report.html olayiwola1/bootstrapfrontend:latest || true
          docker push olayiwola1/bootstrapfrontend:latest

  dast:
    name: DAST Security Test (ZAP Full Scan)
    runs-on: ubuntu-latest
    needs: [docker_build_and_push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start App with Docker Compose
        run: |
          docker-compose -f docker-compose.yaml up -d
          docker ps -a
      
      - name: Delete existing backend container
        if: always()
        run: |
          docker rm -f backend-api || true

      - name: Start Backend
        run: |
          docker run -d -p 5000:5000 --name backend-api --network devsecopsbootstrap_default olayiwola1/bootstrapbackend:latest

      - name: Run ZAP Full Scan
        run: |
          docker run --rm \
            --network devsecopsbootstrap_default \
            -v $(pwd):/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:weekly \
            -t http://backend-api:5000 \
            -r zap-fullscan-report.html \
            -w zap-fullscan-report.md \
            -x zap-fullscan-report.xml \
            -I \
            --print-results \
            --debug || echo "ZAP Full Scan completed with issues, but not blocking."


      - name: Teardown Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.yaml down || true

      - name: Upload ZAP Full Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-fullscan-reports
          path: |
            zap-fullscan-report.html
            zap-fullscan-report.md
            zap-fullscan-report.xml


  kubernetes-deploy:
    name: Kubernetes Deployment
    needs: [dast]
    runs-on: ubuntu-latest

    environment:
      name: dev
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      CLUSTER_NAME: ${{ vars.EKS_CLUSTER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f K8S-DEV/storageclass.yaml -n dev
          kubectl apply -f K8S-DEV/mysql.yaml -n dev
          kubectl apply -f K8S-DEV/backend.yaml -n dev
          kubectl apply -f K8S-DEV/frontend.yaml -n dev

      - name: Wait for Backend Rollout or Rollback on Failure
        run: |
          if ! kubectl rollout status deployment/backend -n dev --timeout=60s; then
            echo "‚ùå Backend deployment failed. Rolling back..."
            kubectl rollout undo deployment/backend -n dev
            exit 1
          fi

      - name: Wait for Frontend Rollout or Rollback on Failure
        run: |
          if ! kubectl rollout status deployment/frontend -n dev --timeout=60s; then
            echo "‚ùå Frontend deployment failed. Rolling back..."
            kubectl rollout undo deployment/frontend -n dev
            exit 1
          fi

      - name: Output Kubernetes Resources
        run: |
          kubectl get pods -n dev
          kubectl get svc -n dev
