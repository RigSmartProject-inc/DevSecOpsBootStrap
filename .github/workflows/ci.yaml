name: CI Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  pre_build:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run ESLint on Frontend
        working-directory: ./client
        run: |
          npm install --save-dev eslint eslint-plugin-react
          npx eslint . --ext .js,.jsx || true

      - name: Run ESLint on Backend
        working-directory: ./api
        run: |
          npm install --save-dev eslint eslint-plugin-react
          npx eslint . --ext .js,.jsx || true

      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=DevSecOpsBootStrap \
            -Dsonar.projectName=DevSecOpsBootStrap \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  sast:
    name: SAST Security Test
    runs-on: ubuntu-latest
    needs: [pre_build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Horusec SAST
        run: |
            docker run --name horusec -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src horuszup/horusec-cli:v2.7 horusec start -p /src -P $(pwd) || true
            docker logs horusec > container-logs
            if [[ "$(grep 'Vulnerability MEDIUM is. [1-9]\d*' container-logs | wc -l)" -gt 0 ]]; then
              echo "❌ Vulnerabilities detected in Horusec scan:"
            else
              echo  "✅ No issues found by Snyk."
            fi          
 
  dast:
    name: DAST Security Test
    runs-on: ubuntu-latest
    needs: [pre_build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start Juice Shop
        run: docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop

      - name: Get container IP
        id: get_ip
        run: |
          container_ip=$(docker inspect -f "{{ .NetworkSettings.Networks.bridge.IPAddress }}" juice-shop)
          echo "container_ip=$container_ip" >> $GITHUB_OUTPUT

      - name: Run ZAP DAST scan
        run: |
          docker run -t --name dast  ghcr.io/zaproxy/zaproxy:weekly zap-baseline.py -t http://${{ steps.get_ip.outputs.container_ip }}:3000 || true
          docker logs dast > container-logs
          if [[ "$(grep 'WARN-NEW. [1-9]\d*' container-logs | wc -l)" -gt 0 ]]; then
            echo "❌ ZAP found critical issues"
          else
            echo "✅ No issues found"
          fi
            
  sca:
    name: SCA Security Test 
    runs-on: ubuntu-latest
    needs: [sast]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        working-directory: ./client
        run: npm install

      - name: Install dependencies
        working-directory: ./api
        run: npm install

      - name: Run Snyk SCA
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
            docker run --name sca -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} -v $(pwd):/app snyk/snyk:node  test --all-projects || true
            docker logs sca > container-logs
            if [[ "$(grep 'found [1-9]\d* issues' container-logs | wc -l)" -gt 0 ]]; then
              echo 'Failing job due to identified failures'
              
            else
              echo "✅ No issues found by Snyk."
            fi
      - name: Run Snyk with log dump
        run: |
          docker rm -f sca || true
          docker run --name sca -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -v $(pwd):/app snyk/snyk:node test --all-projects || true
          docker logs sca | tee snyk-console-output.txt


  docker_build_and_push:
    name: Docker Build & Push Images
    runs-on: ubuntu-latest
    needs: [sca]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push Backend Image
        working-directory: ./api
        run: |
          docker build -t olayiwola1/bootstrapbackend:latest .
          docker run --rm aquasec/trivy image --format table -o ../backend-image-report.html olayiwola1/bootstrapbackend:latest || true
          docker push olayiwola1/bootstrapbackend:latest

      - name: Build & Push Frontend Image
        working-directory: ./client
        run: |
          docker build -t olayiwola1/bootstrapfrontend:latest .
          docker run --rm aquasec/trivy image --format table -o ../frontend-image-report.html olayiwola1/bootstrapfrontend:latest || true
          docker push olayiwola1/bootstrapfrontend:latest

      
  qa-test-deployment:
    name: QA Test Deployment
    needs: [docker_build_and_push]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start App with Docker Compose
        run: |
          docker-compose -f docker-compose.yaml up -d
          docker ps -a

      - name: teardown
        if: always()
        run: |
          docker-compose -f docker-compose.yaml down      

  kubernetes-deploy:
    name: Kubernetes Deployment
    needs: [qa-test-deployment,dast]
    runs-on: ubuntu-latest

    environment:
      name: dev
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      CLUSTER_NAME: ${{ vars.EKS_CLUSTER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f K8S-DEV/storageclass.yaml -n dev
          kubectl apply -f K8S-DEV/mysql.yaml -n dev
          kubectl apply -f K8S-DEV/backend.yaml -n dev
          kubectl apply -f K8S-DEV/frontend.yaml -n dev

      - name: Wait for Backend Rollout or Rollback on Failure
        run: |
          if ! kubectl rollout status deployment/backend -n dev --timeout=60s; then
            echo "❌ Backend deployment failed. Rolling back..."
            kubectl rollout undo deployment/backend -n dev
            exit 1
          fi

      - name: Wait for Frontend Rollout or Rollback on Failure
        run: |
          if ! kubectl rollout status deployment/frontend -n dev --timeout=60s; then
            echo "❌ Frontend deployment failed. Rolling back..."
            kubectl rollout undo deployment/frontend -n dev
            exit 1
          fi

      - name: Output Kubernetes Resources
        run: |
          kubectl get pods -n dev
          kubectl get svc -n dev
